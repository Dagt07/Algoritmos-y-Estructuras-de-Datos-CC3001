# -*- coding: utf-8 -*-
"""David Garcia Tarea2 - Algoritmos y ED

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11qZ0HOEbD_2ShFACR1PEkghdHNBfqNeQ

# CC3001 Otoño 2023 Tarea  [David Garcia]

# Calculadora

### Profesores
Sección 1 Iván Sipirán •
Sección 2 Patricio Poblete •
Sección 3 Nelson Baloian

# Enunciado

Esta tarea consiste en desarrollar una calculadora de expresiones matemáticas al estilo Matlab o Maple, pero con capacidad de procesar un conjunto de comandos bien restringido. Algunos ejemplos de los comandos que acepta y de lo que debe imprimir en la salida van a continuación:

|Entrada (lo que el usuario escribe)   | Salida(lo que imprime el programa)  |
|---|---|
|n=5   | 5  |
|hanoi=2^n-1    |31   |
|var_1 = 23 - 13 + hanoi * 2    |82   |
|h2 = hanoi /2   |15   |
|n   |5   |

A continuación definimos más en detalle lo que se debe implementar:



1.   Cada comando es de la forma "variable=expresión". El efecto es que se debe calcular la expresión de la derecha, guardar el resultado en la variable de la izquierda e imprimir el resultado en la salida. Si se omite desde el "=" hacia adelante (como en el último ejemplo), solo se imprime el valor de la variable. Las variables comienzan con letra y continúan con letras, dígitos y el signo "_".
2.   Los operadores permitidos son "+","-","*", "/", "^".
3.   Solo se trabaja con números enteros y todas las operaciones dan resultado entero (incluyendo la división, que trunca).
4.   Para simplificar, no se puede usar paréntesis y la expresión se evalúa estrictamente de izquierda a derecha. Eso explica el resultado que se obtiene para "var_1".
5.   Si se utiliza una variable que aún no ha sido definida, se debe dar un error

      ERROR: variable indefinida "..."

6.   Si la sintaxis no es correcta, se debe imprimir en la salida un mensaje de la forma

      ERROR: al procesar "..."

      donde el string que se imprime es la parte de la entrada desde el punto del error hacia adelante.


Antes de empezar a escribir código, usted debe dibujar un diagrama de estados que describa la estructura de la entrada. Si le resulta más conveniente, pueden ser varios diagramas (por ejemplo, uno que describa la estructura de una variable, otro la de un número, otra la de un comando). Luego, a partir de ahí escriba el código que implementa esos diagramas. **Importante:** Su código debe ir procesando de un caracter a la vez, para este procesamiento no se puede utilizar funciones de Python que operen sobre strings de largo mayor que uno. Se recomienda tener una función que reciba un comando en un string y lo procese, y otra que se encargue de ir leyendo líneas una a una e invocando a la función antes mencionada para procesarlas.

Para almacenar los nombres y valores de las variables, está permitido el uso de un diccionario de Python.

En su entrega debe describir brevemente el problema, luego describir la estrategia de solución a través de los diagramas de estados, y a continuación el código ejecutable respectivo, agregando todas las explicaciones necesarias para que se entienda.
"""

def operadoresValidos(string):
  #Diccionario con operadores validos
  operadores = {'+': int.__add__, '-': int.__sub__, '*': int.__mul__, '/': int.__trunc__, '^': int.__pow__}
  for llave in operadores: #Recorremos el diccionario por llave, de modo que si por ejemplo la llave '+' coincide con el string que recibe la función,
    if llave==string:      #devuelve su valor que la transforma en la función definida por defecto en python para operar con enteros __add__
      return operadores[llave]

  return False #Si no consiguio ninguno operador

def numerosBase10(string):
  if string == '0' or string == '1' or string == '2' or string == '3' or string == '4' or string == '5' or string == '6' or string == '7' or string == '8' or string == '9':
    return int(string)
  else:
    return False #Si no consigue un numero

def operacionesListas(lista_num,lista_oper):
  acumulado = lista_num[0] #Inicializamos en caso que la lista_num sea > a lista_oper (solo puede ser mayor por 1 de largo), falta analizar caso en que son igual tamaño

  for i in range(1,len(lista_num)):
    if lista_oper[i-1] == '+':
      acumulado += lista_num[i]
    if lista_oper[i-1] == '-':
      acumulado -= lista_num[i]
    if lista_oper[i-1] == '*':
      acumulado *= lista_num[i]
    if lista_oper[i-1] == '/':
      acumulado = acumulado//lista_num[i] #Recordar que por enunciado estamos trabajando con division entera
    if lista_oper[i-1] == '^':
      acumulado = acumulado**lista_num[i]

  return acumulado

#23 - 13 + hanoi * 2
lista1 = [23, 13, 31, 2]
lista2 = ['-', '+', '*']
#2^n-1
lista3 = [2, 5, 1]
lista4 = ['^', '-']

assert(operacionesListas(lista1,lista2)) == 82
assert(operacionesListas(lista3,lista4)) == 31

# Esta función recibe un comando en string y el diccionario de variables. Con él,
# procesa el comando, imprime el resultado de la expresion
# y posiblemente modifica el diccionario. La función retorna el diccionario

def procesar_comando(comando,dicc_var):
  var_aux = ''
  varinterna_aux = ''
  num_aux = ''
  operador_aux = ''
  num = 0
  contIgual = 0
  lista_num = []
  lista_oper = []

  estado = "Estado Variable"
  if comando == "":
    return dicc_var #No se puede procesar la entrada "" ya que no tiene nada, si no, procesamos
  else:
    for j in range(0,len(comando)):

      if estado == "Estado Variable" and contIgual == 0:
        if comando[0].isdigit() == True or operadoresValidos(comando[0]) != False: #Errores para variables mal definidas
          print('Error, variable mal definida')
          return dicc_var
        elif comando[j] != '=' and comando[j] != ' ':
          var_aux += comando[j]
          if j == (len(comando)-1) and  comando[j] != '=' and comando[j] != ' ': #condicion que si es solo n, es cuando se llama a imprimir variable
            if var_aux in dicc_var:
              print(var_aux + '= ' + str(dicc_var[var_aux])) #Printeamos el valor correspondiente a la var anteriormente guardada
              return dicc_var #Necesitamos salir del ciclo
            else:
              print(var_aux + ' variable indefinida')
              return dicc_var

          continue #Este continue es debido a que como cambio a estado expresion y luego puedo cambiar a estado variable, necesito hacer que j corra y no se quede operando
                  #abajo en este mismo ciclo y guardando una varinterna_aux igual a var_aux
                  #Resumen, hace que varinterna_aux no interfiera con var_aux

        elif comando[j] == '=':
          estado = "Estado Expresion" #Cambio a "Estado Expresion", esto significa que terminé de definir la var original, todo lo demás corresponde a como le asigno valor
          contIgual = 1 #Si vuelve a encontrar variables después no toca a var_aux que almacena la ver a definir


      if estado == "Estado Expresion" or estado == "Estado Numero" or estado == "Estado Operador" or estado == "Estado Variable": #Borrar, no hace nada

        #1era vez que entra a Expresion es para simbolizar que se acabo la definicion de variable
        if estado == "Estado Expresion":
          if operadoresValidos(comando[j]) != False: #Error: se encuentra error del tipo x=+2
            print('Syntax Error, desde: ',comando[j-1:])
            return dicc_var
          #Caso para fixear cuando el ultimo elemento de la lista es numero y no se va a conseguir un operador luego para que no cambie a estado oper y muera el programa
          if j == (len(comando)-1) and numerosBase10(comando[j]) != False and comando[j] != ' ': #Por eso j == len(lista)-1
            num_aux += comando[j]
            lista_num.append(int(num_aux))
          else:
            if numerosBase10(comando[j]) != False and comando[j] != ' ': #Es numero
              estado = "Estado Numero"
              num_aux += comando[j]
            elif comando[j].isalpha() == True: #Es Letra
              estado = "Estado Variable"
              varinterna_aux += comando[j]
            elif operadoresValidos(comando[j]) != False and comando[j] != ' ': #Es decir consiguio un operador y cambiamos a "Estado Operador"
              estado = "Estado Operador"
              lista_oper.append(comando[j])
              lista_num.append(int(num_aux))
              num_aux = '' #Reseteamos la var que nos guarda el numero en string

        elif estado == "Estado Numero":

          #Caso para fixear cuando el ultimo elemento de la lista es numero y no se va a conseguir un operador luego para que no cambie a estado oper y muera el programa
          if j == (len(comando)-1) and numerosBase10(comando[j]) != False: #Por eso j == len(lista)-1
            num_aux += comando[j]
            lista_num.append(int(num_aux))
          else: #Caso distinto del último
            if comando[j].isalpha() == True: #Error sintaxis: = 1+1hanoi Por enunciado no se pueden definir variables que comiencen por numero
              print('Syntax Error, variable mal definida desde: ',comando[j-1:])
              return dicc_var
            elif numerosBase10(comando[j]) != False and comando[j] != ' ': #Es numero
              num_aux += comando[j]
            elif operadoresValidos(comando[j]) != False and comando[j] != ' ': #Es decir consiguio un operador y cambiamos a "Estado Operador"
              estado = "Estado Operador"
              lista_oper.append(comando[j])
              lista_num.append(int(num_aux))
              num_aux = ''


        elif estado == "Estado Variable": #Notar que gracias a contIgual = 1 sabe que no es la var que se define, sino algo dentro de la expresion, y la trata como variable interna

          if comando[j] != ' ' and operadoresValidos(comando[j]) == False: #Que no sea operador ya que ahí terminaria de guardar la variable
            varinterna_aux += comando[j]
          elif operadoresValidos(comando[j]) != False and comando[j] != ' ': #Consiguio operador, termino de almacenar variable
            estado = "Estado Operador"
            lista_oper.append(comando[j])
            if varinterna_aux in dicc_var: #Vemos si esta guardada en el dicc
              lista_num.append(dicc_var[varinterna_aux]) #guardamos su valor numerico guardado previamente para utilizarlo en los calculos
            else:
              print('Error ' + varinterna_aux + ' variable indefinida')
              return dicc_var

        elif estado == "Estado Operador":

          if operadoresValidos(comando[j]) != False: #Error: venimos de un operador ---> Doble operador
            print('Syntax Error, desde: ',comando[j-1:])
            return dicc_var
          elif j == (len(comando)-1) and numerosBase10(comando[j]) != False and comando[j] != ' ':
            num_aux += comando[j]
            lista_num.append(int(num_aux))
          else:
            if numerosBase10(comando[j]) != False and comando[j] != ' ': #Es numero
              estado = "Estado Numero"
              num_aux += comando[j] #Como capturar el numero de la derecha si es más de 1
            elif comando[j].isalpha() == True and comando[j] != ' ':
              estado = "Estado Variable"
              varinterna_aux += comando[j]

  if estado == "Estado Numero": #Para tener en cuenta el ultimo numero de un string si al final termina con espacio y no operador: ej 'x=2+1 ' sin esta condicion no tendría en cuenta el 1
    lista_num.append(int(num_aux))

  #Esto se hace ya que cuando no se define variable si no hay operador no funca
  if len(lista_oper) >= 1:
    resultado = operacionesListas(lista_num,lista_oper)
    #Ahora que tenemos la variable separada de su valor luego del caracter '=' podemos retornar el diccionario agregando este valor
    dicc_var[var_aux] = resultado

    #Imprimimos el resultado de la expresión, como pide el enunciado
    print(var_aux + '= ' + str(resultado))
  else:
    #Solo se definio la variable ya que no hubo operadores detectados en la expresión
    dicc_var[var_aux] = lista_num[0]
    print(var_aux + '= ' + str(lista_num[0]))

  return dicc_var

def calculadora(lista_comandos):

  # Este diccionario se inicializa cuando se usa la calculadora
  vars = dict()

  # Se procesan todos los comandos de la lista (lista de string)
  for i in range(0, len(lista_comandos)):
    vars = procesar_comando(lista_comandos[i], vars)
    # Este diccionario almacena las variables que se vayan definiendo en la calculadora

  print('Diccionario :',vars)

"""## Ejemplo 1"""

# EJEMPLO 1:

#Lista del ejemplo
lista = ["n=5","hanoi= 2^n-1","var_1=23-13+hanoi*2","h2=hanoi/2","","n"] #Ejemplo sin espacios #OJO en realidad esta bien que no guarde el n en el ultimo lugar de la lista, pues la "variable" ya existe
#lista = ["n= 5","hanoi=   2 ^n-1 ","var_1 = 23 - 13 +hanoi* 2","h2= hanoi /2","","n"] #Ejemplo con espacios
print
#Otras listas con funcionamiento correcto y también errores de los tipos solicitados
#lista = ["n=1+1","x=2+2*3/2","n"]
#lista = ["n=5","1var=1+1","x=2+/2","y=1var","hanoi=2^n-1"]

calculadora(lista)

"""El resultado del ejemplo anterior debería imprimir en pantalla

   5

   31

   82

   15

   5

## Ejemplo 2
"""

# EJEMPLO 1:
lista = ["n=5","hanoi=2^n-1","var_1 = 23 - 13 + hanoi2 * 2","h2 = hanoi /2","","n"]
calculadora(lista)

"""El resultado del ejemplo anterior debería imprimir en pantalla

5

31

ERROR: variable indefinida "hanoi2"

15

5

## ¿Qué hay que entregar?

Usted debe crear una copia de este documento (del menú seleccionar "Archivo" o "File" y de ahi la opción "guardar copia en Drive" o "save a copy in Drive"). Este nuevo documento (notebook de Colab) es el que debe modificar para luego compartirlo con la opción "Cualquier usuario de internet con este enlace puede ver esto" (o “Anyone on the internet with this link can view”). Esta opción se encuentra disponible en la parte superior derecha de su notebook, en el botón "Compartir" (o "Share"). Una vez que tenga disponible el enlace, colocarlo en la descripción de la entrega de su tarea. No olvide colocar su nombre dentro del notebook.
"""